{"version":3,"file":"js/app.e7c97bb9.js","mappings":"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","sources":["webpack://claimant-frontend/./src/App.vue","webpack://claimant-frontend/./src/App.vue?7ccd","webpack://claimant-frontend/./src/views/RepClientView.vue","webpack://claimant-frontend/./src/views/RepClientView.vue?61fe","webpack://claimant-frontend/./src/views/GetData.vue","webpack://claimant-frontend/./src/views/GetData.vue?bc82","webpack://claimant-frontend/./src/views/ClientDataView.vue","webpack://claimant-frontend/./src/views/ClientDataView.vue?9469","webpack://claimant-frontend/./src/router/index.js","webpack://claimant-frontend/./src/store/index.js","webpack://claimant-frontend/./src/main.js","webpack://claimant-frontend/webpack/bootstrap","webpack://claimant-frontend/webpack/runtime/chunk loaded","webpack://claimant-frontend/webpack/runtime/compat get default export","webpack://claimant-frontend/webpack/runtime/define property getters","webpack://claimant-frontend/webpack/runtime/global","webpack://claimant-frontend/webpack/runtime/hasOwnProperty shorthand","webpack://claimant-frontend/webpack/runtime/jsonp chunk loading","webpack://claimant-frontend/webpack/startup"],"sourcesContent":["<template>\n  <nav>\n    <router-link to=\"/\">Clients</router-link> |\n    <router-link to=\"/load\">Load Data</router-link> | \n    <router-link to=\"/data\">Review Data</router-link>\n  </nav>\n  <router-view/>\n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n\n  a {\n    font-weight: bold;\n    color: #2c3e50;\n\n    &.router-link-exact-active {\n      color: #42b983;\n    }\n  }\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=6a5bf2ea\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=6a5bf2ea&lang=scss\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div id=\"RepClientList\" class=\"column\">\n        <div class=\"client row\" v-for=\"client in clients\" :key=\"client\" v-on:click=\"chooseClient(client)\">\n            <h2>{{ client.name }}</h2>\n            <h3 v-if=\"client.hasData\">Review Records</h3>\n            <h3 v-else>Request Records</h3>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\n\nexport default {\n    computed: {\n        ...mapState({\n            clients: state => state.clients\n        })\n    },\n    data: function() {\n        return {\n            clients: [{\n                name: \"Aaron Brekke\",\n                hasData: false,\n                dataUrl: \"../../data/AaronBrekke/Aaron697_Brekke496_2fa15bc7-8866-461a-9000-f739e425860a\"\n            }, {\n                name: \"Youlanda Hettinger\",\n                hasData: false,\n                dataUrl: \"../../data/YoulandaHettinger/Youlanda785_Hettinger594_7fe3fe78-f363-4c13-95ae-a05df266448a\"\n            }]\n            // n\n        }\n    },\n    methods: {\n        chooseClient(client) {\n            this.$store.commit('setClient', client)\n            if (client.hasData) {\n                //route to data view\n            } else {\n                //route to request view\n            }\n            //set client in store\n            //if client has data => data view\n            //if not => request or upload data view\n        }\n    }\n}\n</script>\n\n<style>\n</style>","import { render } from \"./RepClientView.vue?vue&type=template&id=723f8634\"\nimport script from \"./RepClientView.vue?vue&type=script&lang=js\"\nexport * from \"./RepClientView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div>\n        <h3>Get Data - {{ client.name }}</h3>\n        <!--upload box-->\n        <div id=\"upload div\" class=\"column\">\n            <p>(in development - basic functionality works) upload a FHIR R4 JSON file for the current client (additional filetypes coming soon)</p>\n            <p>the file will be stored in your browser's local storage - only search terms will be transmitted online.</p> <!--we will only store anonymized metadata about search and analyses that you choose to share to help us build our product.</p>-->\n            <input id=\"fileInput\" type=\"file\" class=\"row\">\n            <button v-on:click=\"readFile()\" id=\"uploadSubmit\" type=\"button\" class=\"row\">Submit JSON</button>\n            <h3 v-if=\"successfulLoad\" style=\"color: rgb(3, 222, 3)\">Loaded JSON successfully - navigate to Review Data at top of page.</h3>\n            <h3 v-if=\"uploadedJson && fhirResourceType\">Detected FHIR Resource of Type: {{ fhirResourceType }} </h3>\n            <h3 v-if=\"detectedPatientName\">Patient: {{ detectedPatientName }}</h3>\n            <h3 v-if=\"numRecords\">Record count: {{ numRecords }}</h3>\n            <h3 v-if=\"recordTypes\">Record types: {{ recordCounts }}</h3>\n            <button v-if=\"uploadedJson && fhirResourceType\" v-on:click=\"setClient()\">Confirm & Upload as New Client</button>\n        </div>\n        <!--1up explanation-->\n        <!--<div id=\"1up\">\n            <p>the below link will route you to the 1up sandbox for the associated provider for your client</p>\n            <a>_to be filled in_</a>\n        </div>-->\n        <!--1up links-->\n        <!--1up link => consent page => data to express server => refresh the page in 5 seconds and check if the data's there-->\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport {levenshtein} from 'string-comparison'\n//import { thresholdSturges } from 'd3';\n\nfunction similarNames(name1, name2) {\n    return levenshtein.similarity(name1, name2) > .55;\n}\n\nexport default {\n    computed: {\n        ...mapState({\n            client: state => state.currentClient,\n            oneUpClientId: state => state.oneUpClientId\n        })\n    },\n    data: function() {\n        return {\n            uploadedJson: {},\n            fhirResourceType: \"\",\n            successfulLoad: false\n        }\n    },\n    methods: {\n        async requestData(clientName) {\n            let oneUpProviderId = \"\";\n            switch (clientName) {\n                case \"Donna Dobson\": {\n                    //go to Veragidm\n                    oneUpProviderId = 32;\n                    break;\n                }\n                case \"Wilma Smart\": {\n                    //Cerner\n                    oneUpProviderId = 4707;\n                    break;\n                }\n                case \"Fhir Jason\": {\n                    //Epic\n                    oneUpProviderId = 4706;\n                    break;\n                }\n                case \"BB User\": {\n                    //Medicare\n                    oneUpProviderId = 4748;\n                    break;\n                }\n                /*case \"Adult Female\" {\n                    //eClincalWorks\n                    //test environment unavailable per 1up https://docs.1up.health/help-center/Content/en-US/get-started/fhir-test-credentials.html\n                }*/\n            }\n            const reqUrl = `https://api.1up.health/connect/system/clinical/${oneUpProviderId}?client_id=${this.oneUpClientId}&access_token=${this.oneUpAccessToken}`;\n            await fetch(reqUrl);\n        },\n        getPatientNameFromPatientRec(pRec) {\n            if (!pRec.resource.name) {\n                return \"\";\n            } else \n            //the name entry has cardinality 0..* https://www.hl7.org/fhir/patient.html\n            //so account for possibility of array as well as single entry\n            if (pRec.resource.name[0]) {\n                return pRec.resource.name[0].given + \" \" + pRec.resource.name[0].family;\n            } else { \n                return pRec.resource.name.given + \" \" + pRec.resource.name.family;\n            }\n        },\n        getPatientNameFromBundle(bundle) {\n            let patientRecs = bundle.entry.filter((obj) => obj.resource.resourceType.toLowerCase() === \"patient\");\n            if (patientRecs.length > 1) {\n                //check that patients have the same name\n                const name = this.getPatientNameFromPatientRec(patientRecs[0]);\n                patientRecs.forEach((pat) => {\n                    var currName = this.getPatientNameFromPatientRec(pat);\n                    if (!currName === name) {\n                        if (similarNames(currName, name)) {\n                            console.log(\"**Different name but similar\");\n                            //**should send to server logs\n                        }\n                        //check similarity & report differences\n                        //**unit test this\n                        throw new Error(\"different patient names within the same bundle: \" + name + \", \" + currName);\n                    }\n                })\n                return name;\n            } else if (patientRecs.length === 0) {\n                throw new Error(\"no patient record found in bundle\");\n            } else {\n                return this.getPatientNameFromPatientRec(patientRecs[0]);\n            }\n            //check list of clients for patient with that name or similar\n        },\n        getRecordTypesInBundle(bundle) {\n            var recordTypes = [];\n            var recordCounts = {}\n            bundle.entry.map((obj) => {\n                let typ = obj.resource.resourceType; \n                if (recordTypes.indexOf(typ) < 0) {\n                    recordTypes.push(typ);\n                    recordCounts[typ] = 1;\n                } else {\n                    recordCounts[typ] += 1;\n                }\n            });\n            return {recordTypes, recordCounts};\n        },\n        async readFile() {\n            let inputFile = document.querySelector(\"input\").files[0];\n            const fileReader = new FileReader();\n            //https://developer.mozilla.org/en-US/docs/Web/API/FileReader/FileReader\n            fileReader.onload = (evt) => {\n                console.log(\"file reader on load\");\n                let text = evt.target.result;\n                let json = JSON.parse(text);\n                console.log(json.resourceType);\n                console.log(json);\n                if (json.resourceType) {\n                    this.uploadedJson = json;\n                    this.fhirResourceType = json.resourceType.toLowerCase();\n                    if (this.fhirResourceType === \"bundle\") {\n                        this.detectedPatientName = this.getPatientNameFromBundle(this.uploadedJson);\n                        //this.newPatient = (this.$store.clients.filter((client) => client.name === this.detectedPatientName).length === 0);\n                        this.numRecords = this.uploadedJson.entry.length;\n                        let typeObj = this.getRecordTypesInBundle(this.uploadedJson);\n                        this.recordTypes = typeObj.recordTypes;\n                        this.recordCounts = typeObj.recordCounts;\n                        console.log(this.recordCounts);\n                    }\n                    //import('js-fhir-validator/r4/js/' + this.fhirResourceType.toLowerCase()).then(res => console.log(res));\n                    //could dynamically import a validator function for each\n\n                    //uploaded FHIR could be tested for:\n                    //validity according to FHIR specs\n                    //ability to analyze\n                    //uniqueness of records from other records of same client\n                }\n            }\n            try {\n                fileReader.readAsText(inputFile);\n                /*console.log(fileJson);\n                console.log(\"resource type\");\n                console.log(fileJson.resourceType);*/\n            } catch (err) {\n                console.log(err);\n            }\n            \n            //fileReader.readAsText(input);\n        },\n        async setClient() {\n            let loadedSuccessfully = await this.$store.dispatch('loadClientFromUpload', this.uploadedJson);\n            this.successfulLoad = loadedSuccessfully;\n        }\n    }\n}\n</script>\n\n<style>\n</style>","import { render } from \"./GetData.vue?vue&type=template&id=d5f8ca2a\"\nimport script from \"./GetData.vue?vue&type=script&lang=js\"\nexport * from \"./GetData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    \n    <div id=\"container\" class=\"column\">\n        <div id=\"client-name\" class=\"row column\">\n            <h3 style=\"margin-bottom: 0\">Client: {{ currentClient.name }}</h3>\n            <span class=\"row\" style=\"margin-top: 0; align-text: left; left: 0px; max-width: 80vw; font-size: min(3vh, 2vw)\">Showing {{ currentRecords.length }} records of type \"{{ recordType }}\" out of {{ allRecords.length }} records</span>\n        </div>\n        <div id=\"json-popup\" class=\"inactive\">\n            <code id=\"json-container\"></code>\n            <span v-on:click=\"hideJson()\" style=\"font-size: 24px\">X</span>\n        </div>\n        <div class=\"row buttons\" style=\"margin-top: 2vh;\">\n            <div v-if=\"this.recordType === 'ExplanationOfBenefits'\">\n                <span style=\"z-index: 10\" v-on:click=\"switchRecordTypesToDisplay()\">See all records</span>\n                <span v-on:click=\"sortByProvider()\">sort by provider&nbsp;&nbsp;&nbsp;</span>\n                <span v-on:click=\"sortByDate()\">sort by date&nbsp;&nbsp;&nbsp;</span>\n                <span v-on:click=\"reverseClaims()\">reverse list</span>\n            </div>\n            <span v-else style=\"z-index: 10\" v-on:click=\"switchRecordTypesToDisplay()\">See only EoB claims</span>\n        </div>\n        <div class=\"row\">\n                <input style=\"width: 40vw;\" type=\"text\" v-model=\"search\" @keyup.enter=\"submitSearch(search)\"/>\n                <button v-on:click=\"submitSearch(search)\">Search</button>\n                <button v-on:click=\"dismissSearch()\">Dismiss</button>\n                <input type=\"checkbox\" v-model=\"useUMLS\"/>Search with medical synonyms\n                <span v-if=\"searchingUMLS\">...searching</span>\n            </div>\n        <br>\n        <div id=\"record-container\" class=\"row\">\n            <div v-if=\"this.recordType === 'all'\" id=\"all-records\" class=\"column\">\n                <div :id=\"record.fullUrl\" class=\"record row\" :key=\"record\" v-on:click=\"this.showRecord(record)\" v-for=\"record in currentRecords\">\n                    {{ record.resource.resourceType }}\n                    \n                </div>\n            </div>\n            \n            <div v-if=\"this.recordType === 'ExplanationOfBenefits'\" id=\"claims\" class=\"claims column\">\n                <div class=\"claim row\" :key=\"claim\" v-for=\"claim in currentRecords\" :id=\"claim.fullUrl\">\n                    <div><span v-on:click.self=\"this.showEob(claim)\">EoB {{ claim.index }}: </span>\n                        <div v-if=\"claim.resource.item\">\n                            <span v-if=\"claim.resource.item[0]\" v-on:click.self=\"this.showEob(claim)\">{{ claim.resource.item[0].servicedPeriod.start }}</span>\n                            <span v-else v-on:click.self=\"this.showEob(claim)\">{{ \" \" + claim.resource.item.servicedPeriod.start  +\", \"}}</span>\n                            <span class=\"provider\" v-on:click=\"showProvider(claim.resource.provider.reference)\">{{ \" \" + this.getProvider(claim.resource.provider.reference) + \", \"}}</span>\n                            <div :id=\"claim.fullUrl + service\" class=\"service\" v-on:click.self=\"this.showEob(claim)\">\n                                <div v-if=\"claim.resource.item[0]\">\n                                    <span style=\"color:purple\" v-on:click.self=\"this.showEob(claim)\">Products/Services claimed: </span>\n                                    <span v-for=\"item in claim.resource.item\" :key=\"item\" v-on:click.self=\"this.showEob(claim)\">\n                                        {{ item.productOrService.text + \", \"}}\n                                    </span>\n                                </div>\n                                <span v-else v-on:click.self=\"this.showEob(claim)\">{{ claim.resource.item.productOrService.text }}</span>\n                            </div>\n                            <!--<span style=\"font-size:5px\" :key=\"item\" v-for=\"item in claim.resource.item\">{{ item.servicedPeriod.start + \"   \"}}</span>-->\n                            <!--<code :id=\"claim.fullUrl + 'json'\" class=\"inactive\">{{JSON.stringify(claim)}}</code>\n                            -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!--<div v-if=\"relatedRecords[0]\">\n            <div id=\"related-records\"  class=\"column\">\n                <div v-for=\"re in relatedRecords\" :key=\"re\">\n                    <div v-on:click=\"displayRecord(re)\">\n                        {{ re.resourceType }}\n                    </div>\n                </div>\n            </div>\n        </div>-->\n\n            <div id=\"related-records\" class=\"column\">\n                <div v-if=\"currentRecord.refs\">\n                    <br>Found associated records:\n                    <ul v-on:click=\"showRecord(record)\" class=\"record\" :key=\"record\" v-for=\"record in currentRecord.refs\" :id=\"record\">\n                        <li>\n                            <div v-if=\"record.resourceType === 'ExplanationOfBenefit'\"><span style=\"color: green\">EOB</span></div>\n                            <div v-else-if=\"record.resourceType === 'Encounter'\"><span>Encounter</span></div>\n                            <div v-else><span>{{ record.resourceType }}</span></div>\n                        </li>\n                        \n                        <!--                    \n                            //on click, display the json object\n                            //on click when dropdown === active, remove the active class\n                        -->\n                    </ul>\n                </div>\n            </div>\n            <div id=\"synonyms\" class=\"column\">\n                <div v-if=\"synonymsUniqueWords.length > 0\">\n                    <ul>\n                        Unique words of medical synonyms for {{search}} from <a href=\"https://www.nlm.nih.gov/research/umls/index.html\">UMLS</a>\n                        <li v-for=\"word in synonymsUniqueWords\" :key=\"word\">{{ word }}</li>\n                    </ul>\n                    <!--<span>Synonym words: {{ String(synonymsUniqueWords) }}</span>-->\n                </div>\n            </div>\n        </div>\n        \n    </div>\n    \n    \n    \n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport jsonview from '@pgrabovets/json-view'\nimport d3 from 'd3'\n//import Vue from 'vue'\n\n\nexport default {\n    computed: {\n        ...mapState({\n            currentClient: state => state.currentClient,\n            clientDataLoaded: state => state.clientDataLoaded,\n            claims: state => state.claims,\n            //records: state => state.records, //miscRecords - exclusive from other categories\n            providers: state => state.providers,\n            allRecords: state => state.allRecords,\n            allRecordsById: state => state.allRecordsById,\n            currentRecords: state => state.currentRecords,\n            searchingUMLS: state => state.searchingUMLS,\n            medicalSynonyms: state => state.currentSearchMedicalSynonyms,\n            synonymsUniqueWords: state => state.synonymsUniqueWords\n        })\n    },\n    data: function() {\n        return {\n            sortBy: \"date\", //or \"provider\"\n            displayType: \"claims\", //or \"records\" or \"all\"\n            currentClaimUrl: \"\",\n            currentRecordUrl: \"\",\n            relatedRecords: [],\n            currentClaim: {},\n            currentRecord: {},\n            medicalSynonyms: [],\n            recordType: \"all\"\n            //currentRecords: claims\n        }\n    },\n    watch: {\n        claims(newC, oldC) {\n            console.log(\"change in claims: \" );\n            console.log(newC);\n            console.log(oldC);\n        }\n    },\n    methods: {\n        //unused\n        toggleJsonDisplay(claim, node) {\n            console.log(\"toggle json click\");\n            console.log(claim);\n            console.log(claim.resource)\n            console.log(claim.fullUrl);\n            let claimNode = document.getElementById(claim.fullUrl + \"json\");\n            claimNode.classList.contains(\"active\") ? claimNode.classList.replace(\"active\", \"inactive\") \n                                                    : claimNode.classList.replace(\"inactive\", \"active\");\n            //document.getElementById(\"json-container\").innerText = JSON.stringify(claim, \" \", 1);\n            console.log(node);\n        },\n        jsonTree(data, claim=true) {\n            if (claim) {\n                let lastNode = document.getElementById(this.currentClaimUrl);\n                lastNode ? lastNode.style.color = \"black\" : undefined;\n                lastNode ? lastNode.style.backgroundColor = \"white\" : undefined;\n                this.currentClaimUrl = data.fullUrl;\n                let docEl =  document.getElementById(this.currentClaimUrl)\n                if(docEl) {\n                docEl.style.color = \"red\"; \n                docEl.style.backgroundColor = \"gray\"; \n                }\n            } else {\n                this.currentRecord = data;\n                console.log(\"clicked on:\");\n                console.log(this.currentRecord);\n                let lastNode = document.getElementById(this.currentRecordUrl);\n                lastNode ? lastNode.style.color = \"black\" : undefined;\n                lastNode ? lastNode.style.backgroundColor = \"white\" : undefined;\n                this.currentRecordUrl = data.fullUrl;\n                let docEl =  document.getElementById(data.fullUrl)\n                if(docEl) {\n                docEl.style.color = \"red\"; \n                docEl.style.backgroundColor = \"gray\"; \n                }\n            }\n            \n            //jsonview.destroy\n            document.querySelector('#json-container').innerHTML = '';\n            let tree = undefined;\n            if(data.resource && (!data.organization) && (!data.refs)) {\n                tree = jsonview.create(data.resource); //https://github.com/pgrabovets/json-view\n                jsonview.render(tree, document.querySelector('#json-container'));\n                jsonview.expand(tree);\n                let t2 = d3.tree(data.resource);\n                console.log(\"trying d3\");\n                console.log(t2);\n            } else {\n                tree = jsonview.create(data);\n                jsonview.render(tree, document.querySelector('#json-container'));\n                jsonview.toggleNode(tree);\n            }\n            \n            let relTree = jsonview.create(this.allRecsThatReferenceId(data.fullUrl)); //https://github.com/pgrabovets/json-view\n            jsonview.render(relTree, document.querySelector('#json-container'));\n            \n            document.getElementById('json-popup').classList.replace('inactive', 'active');\n        },\n        hideJson() {\n            document.getElementById('json-popup').classList.replace('active', 'inactive');\n            //let lastNode = document.getElementById(this.currentClaimUrl);\n            //lastNode ? lastNode.style.color = \"black\" : undefined;\n        },\n        providerNameString(providerResource) {\n            let provNameObj = providerResource.name[0];\n            let provOrg = providerResource.organization;\n            let name = \"\";\n            if (provNameObj.prefix) {\n                name += provNameObj.prefix + \" \" + provNameObj.given + \" \" + provNameObj.family;\n            }\n            if (provOrg) {\n                name += provOrg;\n            }\n            return name;\n        },\n        allRecsThatReferenceId(fullUrl) {\n            console.log(this.allRecords);\n            let res = this.allRecords.filter((r) => r.fullUrl !== fullUrl &&\n                                                    JSON.stringify(r, null, 2).indexOf(fullUrl) >= 0);\n            console.log(\"found \" + res.length + \" recs that ref this url\");\n            return res;\n        },\n        allRecsReferenced(rec) {\n            console.log(rec);\n            //can manually go thru claims and select each of the relevant parts\n            //and then just use these to display\n            //get an array of all the urls in the rec\n            //let recUrls = this.allRecords.filter((r) => //)\n            //for each url, get the record that matches\n            //return\n        },\n        showEob(eob) {\n            this.jsonTree(eob);\n            this.currentClaim = eob;\n            this.currentRecord = eob;\n            this.relatedRecords = eob.refs;\n            //**this.relatedRecords = \n        },\n        showRecord(rec) {\n            this.jsonTree(rec, false);\n        },\n        getProvider(ref) {\n            //console.log(claim);\n            //console.log('get provider');\n            //console.log(this.$store);\n            //console.log(this.providers);\n            //console.log(this.providers.filter((p) => p.fullUrl === ref)[0]);\n            return this.providerNameString(this.providers.filter((p) => p.fullUrl === ref)[0].resource);\n            //return this.$store.getters.providersMap[ref];\n            //return this.$store.getters.providerByRef(ref);\n        },\n        showProvider(ref) {\n            console.log(ref);\n            console.log(this.$store.state);\n            console.log(this.$store.state.allRecordsById);\n            console.log(this.$store.state.allRecordsById[ref]);\n            console.log(this.$store.getters.providerByRef(ref));\n            this.jsonTree(this.$store.getters.providerByRef(ref));\n        },\n        sortByProvider() {\n            this.$store.commit('sortBy', {toSort: 'claims', sortVar: 'provider'});\n            //window.location.reload();\n            console.log('sorted by provider');\n            console.log(this.claims);\n        },\n        sortByDate() {\n            this.$store.commit('sortBy', {toSort: 'claims', sortVar: 'date'});\n            //window.location.reload();\n        },\n        reverseClaims() {\n            this.$store.commit('reverse', 'claims');\n        },\n        dismissSearch() {\n            this.$store.commit('dismissSearch');\n            this.search = \"\";\n            this.searching = false;\n        },\n        async submitSearch(search) {\n            this.currentClaim = {};\n            this.currentRecord = {};\n            let currSearch = this.search;\n            this.dismissSearch();\n            this.search = currSearch;\n            //show only claims for which \n            console.log(search);\n            //this.currentRecords = this.claims[0];\n            if (this.useUMLS) {\n                console.log(\"using umls to search\");\n                await this.$store.dispatch('getMedicalSynonyms', this.search);\n                //this.$store.commit('searchWithUMLSCurrentRecords', search);\n            } else {\n                this.$store.commit('searchCurrentRecords', {searchStr: search, currRecType: this.recordType});\n                this.searching = true;\n                this.currentClaim = {};\n                this.currentRecord = {};\n            }\n        },\n        switchRecordTypesToDisplay() {\n            if (this.recordType === 'all') {\n                this.$store.commit('setCurrentRecords', {recs: this.claims, recsType: \"ExplanationOfBenefits\"});\n                this.recordType = \"ExplanationOfBenefits\";\n            } else {\n                this.$store.commit('setCurrentRecords', {recs: this.allRecords, recsType: \"all\"});\n                this.recordType = \"all\";\n            }\n            this.currentClaim = {};\n            this.currentRecord = {};\n        }\n    },\n    created() {\n        //this.$store.dispatch('loadTestClientFromDisk');\n        //jsonview.renderJSON({}, document.querySelector('#json-container'));\n    },\n    updated() {\n        console.log(\"update\");\n    }\n}\n</script>\n\n<style>\nhtml {\n    overflow-y: -moz-scrollbars-vertical; \n}\n.column {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n.row {\n  display: flex;\n  flex-direction: row;\n  margin-top: 1vh;\n  /*justify-content: space-around;*/\n}\n#client-name {\n    width: 60vw;\n    text-align: left;\n    margin-bottom: 2vh;\n}\n.claim {\n    text-align: left;\n    left: 0px;\n    justify-content: left !important;\n    flex: 1;\n    display: flex;\n}\n.record:hover {\n    background-color: aquamarine;\n}\n.claim:hover {\n    /*color: lightblue;*/\n    background-color: aquamarine;\n}\n.provider {\n    color: green;\n}\n.provider:hover {\n    color: lightgreen;\n}\n.buttons span {\n    border-radius: 10px;\n    border:rgb(0, 0, 0);\n    border-style:solid;\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n    align-self: center;\n}\n#claims {\n    display: flex;\n    padding-top: 0vw;/*calc(30vw + 10vh);*/\n    font-size: 2vw;\n    max-height: 60vh;\n    min-height: min-content;\n    width: 70vw;\n    overflow: auto;\n}\n#all-records {\n    display: flex;\n    padding-top: 0vw;/*calc(30vw + 10vh);*/\n    font-size: 2vw;\n    max-height: 60vh;\n    min-height: min-content;\n    width: 70vw;\n    overflow: auto;\n}\n#related-records {\n    max-height: 60vh;\n    width: 30vw;\n    left: 60vw;\n}\n#records {\n    max-height: 60vh;\n    width: 50vw;\n    overflow-y: scroll;\n}\ncode {\n    width: 100vw;\n}\n.inactive {\n    display: none;\n}\n.active {\n    display: flex;\n}\n#json-popup {\n    position: absolute;\n    left: 30vw;\n    top: 20vh;\n    max-width: 50vw;\n    z-index: 10;\n    background-color: rgb(207, 255, 134) !important;\n    /*background-color: hsla(115, 50%, 55%, 0.5);*/\n}\n#json-popup .active {\n    display:flex;\n}\n#json-popup .inactive {\n    display: hidden;\n}\n#json-container {\n    justify-content: flex-start;\n    text-align: left;\n    display: flex;\n    font-size: 7em !important;\n    max-height: 60vh;\n    overflow-y: scroll;\n    /*background-color: hsla(258, 67%, 82%, 0.5) !important;*/\n}\n.json-container {\n    background-color: rgb(207, 255, 134) !important;\n    /*background-color: hsla(274, 90%, 72%, 1) !important;*/\n    color: black;\n}\n.json-container .json-string {\n    background-color: rgb(207, 255, 134) !important;\n    /*background-color: hsla(274, 90%, 72%, 1) !important;*/\n    color: rgb(43, 0, 255);\n}\n.json-container .json-number {\n    color: rgb(255, 21, 0);\n}\n.service {\n    font-size: 1.5vw;\n}\n</style>","import { render } from \"./ClientDataView.vue?vue&type=template&id=b49d2462\"\nimport script from \"./ClientDataView.vue?vue&type=script&lang=js\"\nexport * from \"./ClientDataView.vue?vue&type=script&lang=js\"\n\nimport \"./ClientDataView.vue?vue&type=style&index=0&id=b49d2462&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createRouter, createWebHistory } from 'vue-router'\nimport RepClientView from '../views/RepClientView.vue'\nimport LoadView from '../views/GetData.vue'\nimport ClientDataView from \"../views/ClientDataView.vue\"\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: RepClientView\n  },\n  {\n    path: '/load',\n    name: 'load',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    //component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n    component: LoadView\n  }, {\n    path: '/data',\n    name: 'data',\n    component: ClientDataView\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport default router\n","import { createStore } from 'vuex'\n//import fs from 'fs'\nimport testData from \"../../data/AaronBrekke/Aaron697_Brekke496_2fa15bc7-8866-461a-9000-f739e425860a\";\n\n//const blueBookMusculoskeletalUrl = \"./musculoskeletal.txt\"\n//****TODO retrieve local storage\n//will get local storage\n//but need to have server receive data\n//local server? not for prod \n\nfunction nameString(resource) {\n  let nameObj = resource.name[0];\n  let name = \"\";\n  if (nameObj.prefix) {\n      name += nameObj.prefix + \" \" + nameObj.given + \" \" + nameObj.family;\n  }\n  return name;\n}\n\nfunction searchAllLeafsForStr(resource, str) {\n  console.log(resource);\n  console.log(str);\n}\n\nfunction getAllRefsWithinResource(resource) {\n  //onsole.log(\"get al refs\");\n  let refs = [];\n  if (typeof(resource) === \"string\") {\n    if (resource.substring(0,4) === \"urn:\") {\n      console.log(\"found urn\");\n      return [resource];\n    }\n    //console.log(refs);\n    return refs;\n  } else if (Array.isArray(resource)) {\n    resource.forEach((el) => {\n      refs = refs.concat(getAllRefsWithinResource(el));\n    })\n    return refs;\n  } else if (typeof(resource) === \"object\") {\n    //console.log(\"iterable\");\n    let arrNodes = Object.keys(resource).map((key) => resource[key]);\n    if (arrNodes.length === 0) {\n      console.log(\"arr nodes === 0\");\n      //console.log(arrNodes);\n      return refs;\n    } else {\n      arrNodes.forEach((n) => {\n        //console.log(n);\n        refs = refs.concat(getAllRefsWithinResource(n));\n      })\n      //console.log(\"returning foreach refs\");\n      //console.log(refs);\n      return refs;\n    }\n  } else {\n    return refs;\n  }\n  //https://stackoverflow.com/questions/46576420/getting-leaf-values-from-any-kind-of-objects\n    \n  \n  //need to go recursively\n  //iterate thru all chilren\n  //if array, foreach\n  //if obj, iterate through keys\n  //can use iterable?\n  //if obj[key] === \n  //if first four letters === uurn\n  //add to array\n  //return array\n}\n\nfunction mapAllRefsInRecs(recs) {\n  recs.map((rec) => rec['refs'] = getAllRefsWithinResource(rec));\n  console.log(recs);\n  let refRecs = recs.filter((el) => el.refs.length > 0);\n  console.log(\"num of recs with refs: \" + refRecs.length);\n  let recsById = {};\n  recs.map((rec) => recsById[rec.fullUrl] = rec.resource);\n  recs.map((rec) => rec.refUrls = rec.refs);\n  recs.map((rec) => rec.refs = rec.refs.filter((ref) => ref !== rec.fullUrl));\n  recs.map((rec) => rec.refs = [... new Set(rec.refs)]);\n  recs.map((rec) => rec.refs = rec.refs.map((ref) => recsById[ref]));\n  return {recs, recsById};\n}\n\n/*function getPatientResourceFromBundle(bundle) {\n  let patientRecs = bundle.entry.filter((obj) => obj.resource.resourceType.toLowerCase() === \"patient\");\n  if (patientRecs[0]) {\n    return patientRecs[0];\n  } else if (!patientRecs || patientRecs.length === 0) {\n    throw new Error(\"no patient record found\");\n  } else {\n    return patientRecs; //assume that somehow this can happen\n    //and that that means patientRecs actually has type record\n    //(not real)\n  }\n}*/\n\nfunction sortRecsIntoTypes(recs) {\n  let claims = recs.filter((rec) => rec.resource.resourceType === \"ExplanationOfBenefit\");\n  let providers = recs.filter((rec) => [\"Provider\", \"Practitioner\", \"CareTeam\"].indexOf(rec.resource.resourceType) >= 0);\n  let organizations = recs.filter((rec) => rec.resource.resourceType === \"Organization\");\n  let encounters = recs.filter((rec) => rec.resource.resourceType === \"Encounter\");\n  let client = recs.filter((rec) => rec.resource.resourceType === \"Patient\")[0];\n  client.name = nameString(client.resource);\n  //**MAP ALL RELEVANT DATES FOR EACH TYPE SO CAN EASILY DISPLAY */\n  //patient\n  //condition\n  //claims (not EoB)\n  //observation\n  //procedure\n  //immunization\n  //medicationrequest\n  //careplan\n  //diagnosticreport\n  return {claims, providers, organizations, encounters, client}\n}\n  const prepositions = [\"at\", \"the\", \"of\", \"on\", \"to\", \"but\", \"with\", \"a\", \"an\", \"in\", \"pt\", \"ord\", \"-\", \"13\", \"pn\", \"con\", \"de\", \"for\", \"nos\", \"and\"];\n  const medically_unspecific_words = [\"terminology\", \"part\", \"includes\", \"less\", \"first\", \"pathology\", \"primary\", \"type\", \"history\", \"general\", \"disease\", \"diseases\", \"human\", \"procedure\", \"addition\", \"additional\", \"code\", \"count\"];\n\n  function medicalConceptsToWords(medicalConcepts) {\n    let uniqueMedicalConceptWordsCount = {};\n    medicalConcepts.forEach((concept) => {\n      let words = concept.name.split(/[\\s,()/]+/).map((word) => word.toLowerCase());\n      //filter out two letter words?? *IV*\n      words = words.filter((word) => word.length > 2); \n      //filter out medically unspecific words\n      words = words.filter((word) => medically_unspecific_words.indexOf(word) < 0);\n      words = words.filter((word) => word.indexOf(\":\") < 0); //filter out phrases like \"report:find:pt:bone:nar\"\n      console.log(words);\n      //console.log(\"analyzing concept\");\n      //console.log(words);\n      //creates a dictionary of every word in every concept\n      words.forEach((word) => {\n        //skip prepositions\n        if (prepositions.indexOf(word) >= 0) {\n          return;\n        } else {\n          if (!uniqueMedicalConceptWordsCount[word]) {\n            uniqueMedicalConceptWordsCount[word] = 1;\n          } else {\n            //how many times does a word appear across\n            //all related medical concepts from UMLS search\n            //(rough estimate of word => concept area centrality)\n            uniqueMedicalConceptWordsCount[word] += 1; \n          }\n        }\n        }\n      )\n    })\n    let uniqueMedicalConceptsWords = Object.keys(uniqueMedicalConceptWordsCount);\n    return {uniqueMedicalConceptWordsCount, uniqueMedicalConceptsWords};\n  }\n\n  //medicalConcepts: array of objects with\n  //name, relationType, source, and uri\n  function analyzeClaim(claim, medicalConcepts) {\n    \n    console.log(\"analyzeClaim: analyzing claim with medicalConcepts\");\n    //console.log(claim);\n    //console.log(medicalConcepts);\n    let allClaimText = \"\";// = claim.//.this + record.that + record. => \"\"\n    if (claim.resource.item[0]) {\n      claim.resource.item.forEach((item) => {\n        allClaimText += item.productOrService.text + \" \";\n      })\n    } else {\n      allClaimText += claim.resource.item.productOrService.text;\n    }\n    allClaimText = allClaimText.toLowerCase();\n    console.log(\"all claim text:\");\n    console.log(allClaimText);\n    let analysisObj = {};\n    analysisObj.synonyms = medicalConcepts.map((concept) => {concept.name = concept.name.toLowerCase(); return concept});\n    analysisObj.matches = {};\n    let uniqueMedicalConceptWords = {};\n    medicalConcepts.forEach((concept) => {\n      let words = concept.name.split(/[\\s,()/]+/).map((word) => word.toLowerCase());\n      //filter out two letter words?? *IV*\n      words = words.filter((word) => word.length > 2); \n      //filter out medically unspecific words\n      words = words.filter((word) => medically_unspecific_words.indexOf(word) < 0);\n      words = words.filter((word) => word.indexOf(\":\") < 0); //filter out phrases like \"report:find:pt:bone:nar\"\n      console.log(words);\n      //console.log(\"analyzing concept\");\n      //console.log(words);\n      //creates a dictionary of every word in every concept\n      words.forEach((word) => {\n        //skip prepositions\n        if (prepositions.indexOf(word) >= 0) {\n          return;\n        } else {\n          if (!uniqueMedicalConceptWords[word]) {\n            uniqueMedicalConceptWords[word] = 1;\n          } else {\n            uniqueMedicalConceptWords[word] += 1; \n          }\n        }\n        //check if that concept word is in the claim text\n        //if so, add to array of concepts for that word\n        if (allClaimText.indexOf(word) >= 0) {\n          console.log(\"found \" + word);\n          if (analysisObj.matches[word]) {\n            console.log(\"old word\");\n            if (analysisObj.matches[word].indexOf(concept.name)===-1) {\n              analysisObj.matches[word].push(concept);\n            }\n          } else {\n            console.log(\"new word\");\n            analysisObj.matches[word] = [concept];\n          }\n        }\n      })\n    })\n    analysisObj.uniqueMedicalConceptWordsCount = uniqueMedicalConceptWords;\n    analysisObj.uniqueMedicalConceptsWords = Object.keys(uniqueMedicalConceptWords);\n    console.log(uniqueMedicalConceptWords);\n    console.log(\"analysis obj: \");\n    console.log(analysisObj);\n    return analysisObj;\n  }\n\n  function analyzeRecord(record, medicalConcepts) {\n    console.log(\"analyzeRecord: analyzing record with medicalConcepts\");\n    //console.log(claim);\n    //console.log(medicalConcepts);\n    let allRecText = JSON.stringify(record.resource).toLowerCase();\n    console.log(\"all rec text:\");\n    console.log(allRecText);\n    let analysisObj = {};\n    analysisObj.synonyms = medicalConcepts.map((concept) => {concept.name = concept.name.toLowerCase(); return concept});\n    analysisObj.matches = {};\n    let uniqueMedicalConceptWords = {};\n    medicalConcepts.forEach((concept) => {\n      let words = concept.name.split(/[\\s,()/]+/).map((word) => word.toLowerCase());\n      //filter out two letter words?? *IV*\n      words = words.filter((word) => word.length > 2); \n      //filter out medically unspecific words\n      words = words.filter((word) => medically_unspecific_words.indexOf(word) < 0);\n      words = words.filter((word) => word.indexOf(\":\") < 0); //filter out phrases like \"report:find:pt:bone:nar\"\n      console.log(words);\n      //console.log(\"analyzing concept\");\n      //console.log(words);\n      //creates a dictionary of every word in every concept\n      words.forEach((word) => {\n        //skip prepositions\n        if (prepositions.indexOf(word) >= 0) {\n          return;\n        } else {\n          if (!uniqueMedicalConceptWords[word]) {\n            uniqueMedicalConceptWords[word] = 1;\n          } else {\n            //how many times does a word appear across\n            //all related medical concepts from UMLS search\n            //(rough estimate of word => concept area centrality)\n            uniqueMedicalConceptWords[word] += 1; \n          }\n        }\n        //check if that concept word is in the claim text\n        //if so, add to array of concepts for that word\n        if (allRecText.indexOf(word) >= 0) {\n          console.log(\"found \" + word);\n          if (analysisObj.matches[word]) {\n            console.log(\"old word\");\n            if (analysisObj.matches[word].indexOf(concept.name)===-1) {\n              analysisObj.matches[word].push(concept);\n            }\n          } else {\n            console.log(\"new word\");\n            analysisObj.matches[word] = [concept];\n          }\n        }\n      })\n    })\n    //** could create aggregate search stats across all records combining results from individual record analysis\n    analysisObj.uniqueMedicalConceptWordsCount = uniqueMedicalConceptWords;\n    //the unique words will be the same for all records - move this to calling function of this function\n    analysisObj.uniqueMedicalConceptsWords = Object.keys(uniqueMedicalConceptWords);\n    console.log(uniqueMedicalConceptWords);\n    console.log(\"analysis obj: \");\n    console.log(analysisObj);\n    return analysisObj;\n  }\n\n  async function searchUMLS(seedTerm, partialMatch=false) {\n    const base_uri = \"https://uts-ws.nlm.nih.gov/rest\";\n    const apiKey = \"a984d90d-8b63-442a-b828-9464631fde4e\";\n    const apiKeyUrlParam = \"&apiKey=\" + apiKey;\n    console.log(\"searching for seedterm: \" + seedTerm);\n    let url = base_uri + \"/search/current?\" + \"string=\" + encodeURIComponent(seedTerm)\n              + apiKeyUrlParam;\n    if (partialMatch) {\n        url = url + \"&partialSearch=true\";\n    }\n    const res = await fetch(url);\n    const json = await res.json();\n    return json;\n  }\n/*function testClient(params) {\n  this.name = params.name;\n  this.dataSource = params.dataSource;\n  //this.\n}*/\n\nexport default createStore({\n  state: {\n    repId: \"\",\n    currentClient: {},\n    clientDataLoaded: false,\n    clients: [{\n        name: \"Aaron Brekke\",\n        dataUrl: \"../../data/AaronBrekke/Aaron697_Brekke496_2fa15bc7-8866-461a-9000-f739e425860a\"\n      }, {\n        name: \"Youlanda Hettinger\",\n        dataUrl: \"../../data/YoulandaHettinger/Youlanda785_Hettinger594_7fe3fe78-f363-4c13-95ae-a05df266448a\"\n      }],\n    oneUpClientId: \"f987107a279a13583cc6feeb0e28ec0c\",\n    oneUpAccessToken: \"\",\n    claims: [],\n    records: [],\n    providers: [],\n    currentRecords: [],\n    currentRecordsType: \"all\",\n    availableClients: [],\n    umlsSearches: {}, //maps search terms to search results\n    searchingUMLS: false,\n    currentSearchMedicalSynonyms: [],\n    synonymsUniqueWords: []\n   //currentConditionHeader: \"Musculoskeletal Disorders\",\n    //condHeaderConcepts: [],\n     //match words, add matched words to record, color record if matchedWords\n    /*sectionHeaders: [\"Category of Impairments, Musculoskeletal\", \"Disorders of the skeletal spine resulting in compromise of a nerve root(s)\",\n  \"Lumbar spinal stenosis resulting in compromise of the cauda equina \", \"Reconstructive surgery or surgical arthrodesis of a major weight-bearing joint\",\n\"Abnormality of a major joint(s) in any extremity\", \"Pathologic fractures due to any cause\", \"Amputation due to any cause\", \"Soft tissue injury or abnormality under continuing surgical management \",\n\"Non-healing or complex fracture of the femur, tibia, pelvis, or one or more of the talocrural bones \", \"Non-healing or complex fracture of an upper extremity \"],\n*/\n    //relevancyString: (currentConditionHeader + \" \" + sectionHeaders.join(\" \")).toLowerCase() \n  },\n  getters: {\n    findProviderForEOB(state, eob) {\n      let providerRef = eob.rsource.provider.reference;\n      let providerResource = state.records.filter((rec) => rec.fullUrl === providerRef);\n      if (providerResource) {\n        console.log(\"found provider for EOB\");\n        console.log(providerResource);\n      } else {\n        console.log(\"could not find provider for EOB\");\n        console.log(providerRef);\n      }\n      return providerResource;\n    },\n    providerByRef: (state) => (providerRef) => {\n      //let providerResource = state.records.filter((rec) => rec.fullUrl === providerRef);\n      let providerResource = state.providers.filter((rec) => rec.fullUrl === providerRef);\n      if (providerResource.length > 0) {\n        console.log(\"found provider for EOB\");\n        console.log(providerResource);\n        return providerResource[0];\n      } else {\n        console.log(\"could not find provider for EOB\");\n        console.log(providerRef);\n      }\n      return providerResource;\n    },\n    referencesToRec: (state) => (recUrl) => {\n      return state.allRecords.filter((rec) => rec.refs.indexOf(recUrl) >= 0);\n    }\n    /*providersMap(state) {\n      let pMap = {};\n      state.providers.map((p) => {\n        pMap[p.fullUrl] = p;\n        pMap[p.fullUrl].organizationRef = state.encounters.filter((e) => {\n          e.resource.participant[0].individual.reference === p.fullUrl\n        })[0].resource.serviceProvider.reference;\n        pMap[p.fullUrl].organization = state.organizations.filter((o) => o.fullUrl === pMap[p.fullUrl].organizationRef);\n      });\n      console.log(pMap);\n      console.log(pMap);\n      return pMap;\n    }*/\n    /*recordByUurn(state, uurn) {\n      return \n    }*/\n  },\n  mutations: {\n    setClient(state, data) {\n      console.log(\"setClient mutation with data: \");\n      console.log(data);\n      state.currentClient = data.currentClient;\n      state.allRecords = data.allRecords;\n      state.allRecordsById = data.allRecordsById;\n      state.claims = data.claims;\n      if (state.currentRecordsType === 'ExplanationOfBenefit') {\n        state.currentRecords = state.claims;\n      } else {\n        state.currentRecords = state.allRecords;\n      }\n      state.currentRecords = state.currentRecords.map((rec, ind) => {rec.index = ind + 1; return rec});\n      state.records = data.records;\n     // state.records = state.records.map((rec, ind) => rec.ind = ind);\n      state.providers = data.providers;\n      state.encounters = data.encounters;\n      state.client = data.client;\n      state.organizations = data.organizations;\n      //add refs to the provider's organization within the provider record\n      state.providers.map((p) => {\n        //console.log(\"new p \" + p.fullUrl);\n        let encounterMatch = state.encounters.filter((e) => {\n          /*console.log(\"e\");\n          console.log(e);\n          console.log(e.resource.participant[0].individual.reference);\n          console.log(p.fullUrl);\n          console.log(e.resource.participant[0].individual.reference === p.fullUrl);*/\n          if (e.resource.participant) {\n            return e.resource.participant[0].individual.reference === p.fullUrl\n          } else {\n            return false;\n          }\n          \n        });\n        //console.log(\"e\");\n        console.log(encounterMatch);\n        //find an encounter with that provider, and then pull out the reference for that org\n        if (encounterMatch && encounterMatch.length > 0) {\n          console.log(\"encounter match\");\n          console.log(encounterMatch);\n          p.encounters = encounterMatch;\n          let pOrgRef = encounterMatch[0].resource.serviceProvider.reference;\n          //let pOrgName = encounterMatch.resource.serviceProvider.name;\n          if (pOrgRef) {\n            console.log(\"found org for provider\");\n            p.organizationRef = pOrgRef;\n            p.organization = state.organizations.filter((o) => o.fullUrl === p.organizationRef);\n            if (p.organization[0]) {\n              p.organization = p.organization[0];\n            }\n          }\n          /*if (pOrg) {\n            console.log(\"found org for provider\");\n            p.organizationRef = pOrg.resource.serviceProvider.reference;\n            p.organization = state.organizations.filter((o) => o.fullUrl === p.organizationRef);\n            console.log(p.organization);\n          }*/\n        }\n        \n      });\n    },\n    setClients(state, clients) {\n      state.clients = clients\n    },\n    setCurrentRecords(state, {recs, recsType}) {\n      state.currentRecordsType = recsType;\n      state.currentRecords = recs;\n    },\n    sortBy(state, params) {\n      console.log(\"sortBy\");\n      console.log(params);\n      let toSort = params.toSort;\n      console.log('to sort: ' + toSort);\n      let sortVar = params.sortVar;\n      const sortVarPaths = { //ideally derived dynamically\n        'claims': {\n          'provider': ['resource', 'provider', 'reference'],\n          'date': ['resource', 'item', 'servicedPeriod', 'start']\n        }\n      }//params.sortVarPath;\n      let sortVarPath = sortVarPaths[toSort][sortVar];\n      function getVarFromObj(obj, varPath) {\n        //let v = undefined;\n        return varPath.reduce((acc, o, index) => {\n          //console.log(acc);\n          //console.log(index);\n          if (Array.isArray(acc[varPath[index]])) {\n            return acc[varPath[index]][0]\n          } else {\n            return acc[varPath[index]]\n          }\n        }, obj)\n      }\n      //test sortBy\n      console.log(\"sort by test: \" + (getVarFromObj({'fruit': {\n        'name': 'banana'\n          }\n        }, ['fruit', 'name']) === 'banana'));\n      //let theVar = toSort.reduce((acc, el, index) => el[sortVarPath[index]]);\n      function varCompare(a, b, sortVarPath) {\n        let aVar = getVarFromObj(a, sortVarPath);\n        let bVar = getVarFromObj(b, sortVarPath);\n        if (aVar < bVar) {\n          return -1\n        } else if (aVar > bVar) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n      state[toSort] = state[toSort].toSorted((a,b) => varCompare(a,b,sortVarPath));\n      console.log(\"sorted: \");\n      console.log(state[toSort].map((el) => getVarFromObj(el, sortVarPath)));\n      /*switch (param) {\n        case 'provider':\n          //get provider path from each claim\n          state.claims = state.claims.sort((a,b) => varCompare(a,b,sortVarPath));\n          break;\n        case 'date':\n          state.claims = state.claims.sort((a,b) => varCompare(a,b,sortVarPath));\n          break;\n      }*/\n    },\n    reverse(state, toReverse) {\n      state[toReverse] = state[toReverse].reverse();\n    },\n    dismissSearch(state) {\n      //console.log(state.currentRecordsNoSearch);\n      //state.currentRecords = state.currentRecordsNoSearch;\n      if (state.currentRecordsType === 'all') {\n        state.currentRecords = state.allRecords;\n      } else if (state.currentRecordsType === \"ExplanationOfBenefits\") {\n        state.currentRecords = state.claims;\n      }\n      state.synonymsUniqueWords = [];\n    },\n    searchCurrentRecords(state, {searchStr, currRecType}) {\n      state.currentRecordsType = currRecType;\n      let searchStrL = searchStr.toLowerCase();\n      console.log(\"searching for \" + searchStr);\n      console.log(state.currentRecords);\n      console.log(state.currentRecords.length);\n      /*if (state.currentRecords[0].resource.resourceType === \"ExplanationOfBenefits\") {\n        state.currentRecords = state.currentRecords.filter((rec) => {\n          if (rec.resource.item[0]) {\n            console.log(\"multiple items\");\n            let matches = rec.resource.item.filter((it) => {\n              return (it.productOrService.text.toLowerCase().indexOf(searchStrL) >= 0)\n            });\n            if (matches.length > 0) {\n              console.log(\"match\");\n              return true;\n            } else {\n              return false;\n            }\n          } else {\n            console.log(\"single item\");\n            console.log(rec.resource.item);\n          }\n        })\n      }*/\n      //for each node\n      //if its value has indexof search Str\n      //store both the match and node path => display the property and its match in UI\n      state.currentRecordsNoSearch = state.currentRecords;\n      state.currentRecords = state.currentRecords.filter((rec) => {\n        return (JSON.stringify(rec).toLowerCase().indexOf(searchStrL) >= 0)\n      });\n      searchAllLeafsForStr(state.currentRecords[0], searchStr);\n      console.log(state.currentRecords.length);\n      \n    },\n    setSearchingUmlsStatus(state, stat) {\n      state.searchingUMLS = stat;\n    },\n    //also filters out records that match\n    setSynonyms(state, results) {\n      console.log(\"UMLS search results given in setSynonyms: \");\n      console.log(results);\n      state.currentSearchMedicalSynonyms = results.synonyms;\n      state.synonymsUniqueWords = medicalConceptsToWords(results.synonyms).uniqueMedicalConceptsWords;\n      console.log(\"synonyms\");\n      console.log(state.currentSearchMedicalSynonyms);\n      console.log(\"current recs\");\n      console.log(state.currentRecords); //why does arr have len 0 for allRecords currentRecords\n      \n      //set the search results\n      state.currentRecords = state.currentRecords.filter((rec) => {\n        var res = {};\n        if (state.currentRecordsType === \"ExplanationOfBenefit\") {\n          res = analyzeClaim(rec, results.synonyms);\n        } else {\n          res = analyzeRecord(rec, results.synonyms);\n        }\n        console.log(res);\n\n        //**can set the number of matches threshold for a search result\n        let filteredMatches = Object.keys(res.matches).filter((key) => {\n          return res.matches[key].length >= 1;\n        }); //attempt at language preposition filter (e.g. 'y' or 'con')\n        if (filteredMatches.length > 0) {\n          console.log(\"Record \" + rec.index + \" passes filtered matches: \");\n          console.log(filteredMatches);\n        }\n        return (filteredMatches.length > 0);\n      });\n\n    }\n    /*findRelevancyForCurrentCondition(state) {\n      \n    }*/\n  },\n  actions: {\n   /*async getAccessTokenOneUp() {\n      const authUrl = `https://auth.1updemohealthplan.com/oauth2/authorize/test?client_id=${this.oneUpClientId}&scope=user/*.read&redirect_uri=${redirect_uri}`\n    },*/\n    async getMedicalSynonyms({commit}, seedTerm) {\n      commit('setSearchingUmlsStatus', true);\n      console.log(\"getting syn with seed term: \" + seedTerm);\n      //should either only get the synonyms or search and change the name\n      const apiKey = \"a984d90d-8b63-442a-b828-9464631fde4e\";\n      const apiKeyUrlParam = \"?apiKey=\" + apiKey;\n      let analysisObj = {\n        seedTerm,\n        synonyms: [{name: seedTerm}]\n      }\n      let baseConceptResults = await searchUMLS(seedTerm);\n      if (baseConceptResults.result.results.length > 0) {\n        //get the first concept from the results list of concepts\n        let conceptReq = baseConceptResults.result.results[0].uri + apiKeyUrlParam;\n        //console.log(\"requesting concept uri \" +conceptReq);\n        let conceptRes = await fetch(conceptReq);\n        let conceptJson = await conceptRes.json();\n        console.log(\"got results for concept search: \");\n        console.log(conceptJson);\n        baseConceptResults.result.results[0].data = conceptJson;\n        analysisObj.umlsConcept = conceptJson.result.name.toLowerCase();\n        console.log(\"found concept: \" + conceptJson.result.name);\n        analysisObj.exactMatch = analysisObj.seedTerm === analysisObj.umlsConcept;\n\n        if (conceptJson.result.relationCount > 0) {\n          console.log(\"found related concepts\");\n          let relReq = conceptJson.result.relations + apiKeyUrlParam;\n          let relRes = await fetch(relReq);\n          let relJson = await relRes.json();\n          baseConceptResults.result.results[0].data.result.relRes = relJson;\n          console.log(\"res res\");\n          console.log(relJson);\n          let cleanRel = relJson.result.map((el) => {\n              let cleanEl = {};\n              if (el.additionalRelationLabel !== \"\") {\n                  cleanEl.relationType = el.additionalRelationLabel;\n              } else {\n                  cleanEl.relationType = el.relationLabel;\n              }\n              cleanEl.name = el.relatedIdName;\n              cleanEl.source = el.rootSource;\n              cleanEl.uri = el.relatedId;\n              return cleanEl;\n          });\n          baseConceptResults.result.results[0].data.result.cleanRel = cleanRel;\n          analysisObj.synonyms = analysisObj.synonyms.concat(cleanRel);\n\n        } else {\n          console.log(\"concept has no related concepts, using original search results\");\n          baseConceptResults = await searchUMLS(seedTerm, true);\n          //needs data cleaning\n          analysisObj.synonyms = analysisObj.synonyms.concat(baseConceptResults.result.results);\n        }\n        //create an array of all unique words ?\n        commit('setSynonyms', analysisObj);\n        commit('setSearchingUmlsStatus', false);\n      } else {\n        console.log(\"COULD NOT FIND ANY CONCEPT WITH THIS SEED TERM\");\n        commit('setSearchingUmlsStatus', false);\n      }\n  },\n    /*async fetchBlueBookTestCond({commit}) {\n      \n    },*/\n    /*async fetch1upSandbox({commit}) {\n      function criteriaTag(data) {\n        this.matchPhrase = data.matchPhrase;\n        this.sourceBlueBookText = data.sourceBlueBookText;\n        this.blueBookEvidenceType = data.blueBookEvidenceType;\n        // exactMatch | exactMatchTo\n        this.relationshipToBlueBookText = data.relationshipToBlueBookText;\n        this.sourceBlueBookRelationshipPath = data.sourceBlueBookRelationshipPath;\n        this.parentResource = data.parentResource;\n      }\n      function TestClient(data) {\n        this.name = data.name;\n        this.username = data.username;\n        this.pw = data.pw;\n        this.knownProviders = [];\n        this.providersAccessed = [];\n        this.relevantRecords = [];\n        this.analytics = {};\n      }\n      const donna = new TestClient({\n        name: \"Donna Dobson\",\n        username: \"donna.dobson_prounityfhir\",\n        pw: \"Allscripts#1\",\n\n      })\n      const testUsers = [];\n      const testUser = \"\";\n    },*/\n    /*async loadDataFromServer({state, commit}) {\n      //get bluebook condition text\n      //get local test patient data\n      //\n    },*/\n    //checks whether or not the app has saved medical records for an array of clients\n    async checkClientsStatus({state, commit}) {\n      const clientsToCheck = state.clients.filter((client) => client.status === \"awaitingData\")\n                              .map((client) => client.id);\n      const clientStatusUrl = \"sandbox.claimant.us/\" + state.repId + \"/\" + clientsToCheck;\n      const statusResults = await fetch(clientStatusUrl);\n      const statJson = await statusResults.json();\n      console.log(statJson);\n      //const clientsStats = statJson.\n      //const updatedClients = \n      commit('setClients', state.clients);\n    },\n    async checkClientStatus(clientId) {\n      const patientId = clientId;\n      const reqUrl = `https://api.1up.health/r4/Patient/${patientId}/$everything`;\n      //attach header\n      const res = await fetch(reqUrl);\n      return res;\n    },\n    async loadTestClientFrom1up(/*{state, commit},*/) {\n      console.log(\"1up test client req flow\");\n      //let name = patientName;\n      const reqParams = {\n        client_id: \"f987107a279a13583cc6feeb0e28ec0c\",\n        redirect_uri: \"http://localhost:8080\"\n      };\n      let paramStr = \"?\"; //convert params object to query string parameters\n      Object.keys(reqParams).map((key) => paramStr+= key + \"=\" + reqParams[key] + \"&\");\n\n      /*let oauthUrl = \"https://auth.1updemohealthplan.com/oauth2/authorize/test\";\n      let authCodeRes = await fetch(oauthUrl + paramStr);\n      console.log(authCodeRes);\n      //get access token*/\n      //make FHIR server request with content=name\n      //load it and return ok\n      //in the vue, route to data vue\n    },\n    async loadTestClientFromDisk({state, commit, dispatch}) {\n      let name = \"AaronBrekke\";\n      //let filename = \"Aaron697_Brekke496_2fa15bc7-8866-461a-9000-f739e425860a.json\";\n      //let res = await fs.readFile('../../data/' + name + \"/\" + filename);\n      console.log(\"test data\");\n      console.log(testData);\n      let recs = await testData.entry;\n      let mappedRecs = mapAllRefsInRecs(recs);\n      recs = mappedRecs.recs;\n      let recsById = mappedRecs.recsById;\n      console.log(\"read client data\");\n      console.log(recs);\n      console.log(\"recs by id: \");\n      console.log(recsById);\n      //console.log(res);\n      //let client = recs.filter((rec) => rec.resource.resourceType === \"Patient\")[0];\n      //console.log(\"client\");\n      //console.log(client);\n      let typedRecs = sortRecsIntoTypes(recs);\n      //make an array of all resource types (non-repeating)\n      //make a dict where they're all sorted into their resource type\n      commit('setClient', {\n        name,\n        allRecords: recs,\n        allRecordsById: recsById,\n        currentClient: {name: nameString(typedRecs.client.resource)},\n        //claims: recs.filter((rec) => rec.resource.resourceType === \"ExplanationOfBenefit\"),\n        //currentRecords: recs.filter((rec) => rec.resource.resourceType === \"ExplanationOfBenefit\"),\n        ...typedRecs\n      });\n\n      console.log(state.claims);\n      console.log(state.records);\n      console.log(state.providers);\n\n      dispatch('loadTestClientFrom1up');\n    },\n    async loadClientFromUpload({commit}, clientData) {\n      let recs = await clientData.entry;\n      let mappedRecs = mapAllRefsInRecs(recs);\n      recs = mappedRecs.recs;\n      let recsById = mappedRecs.recsById;\n      let typedRecs = sortRecsIntoTypes(recs);\n      let name = typedRecs.client.name;\n      let currentClient = {name};\n      try {\n        commit('setClient', {\n          name,\n          allRecords: recs,\n          allRecordsById: recsById,\n          currentClient,\n          ...typedRecs\n        })\n        return true;\n      } catch (err) {\n        console.log(\"could not setClient with loaded JSON\");\n        console.log(err);\n        return false;\n      }\n    }\n  },\n  modules: {\n  }\n})\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkclaimant_frontend\"] = self[\"webpackChunkclaimant_frontend\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(938); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","_createVNode","_component_router_link","to","_component_router_view","script","__exports__","render","id","class","_createElementBlock","_hoisted_1","_Fragment","_renderList","_ctx","clients","client","key","onClick","$event","$options","chooseClient","_toDisplayString","name","hasData","_hoisted_3","_hoisted_4","computed","mapState","state","data","dataUrl","methods","this","$store","commit","type","style","_hoisted_2","_cache","readFile","successfulLoad","_hoisted_5","uploadedJson","fhirResourceType","_hoisted_6","detectedPatientName","_hoisted_7","numRecords","_hoisted_8","recordTypes","_hoisted_9","recordCounts","setClient","similarNames","name1","name2","levenshtein","currentClient","oneUpClientId","requestData","clientName","oneUpProviderId","reqUrl","oneUpAccessToken","fetch","getPatientNameFromPatientRec","pRec","resource","given","family","getPatientNameFromBundle","bundle","patientRecs","entry","filter","obj","resourceType","toLowerCase","length","forEach","pat","currName","console","log","Error","getRecordTypesInBundle","map","typ","indexOf","push","inputFile","document","querySelector","files","fileReader","FileReader","onload","evt","text","target","result","json","JSON","parse","typeObj","readAsText","err","loadedSuccessfully","dispatch","_hoisted_32","_hoisted_35","href","currentRecords","recordType","allRecords","hideJson","switchRecordTypesToDisplay","sortByProvider","sortByDate","reverseClaims","search","onKeyup","_withKeys","submitSearch","dismissSearch","useUMLS","searchingUMLS","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","record","fullUrl","showRecord","_hoisted_14","_hoisted_15","claim","_withModifiers","showEob","index","_hoisted_17","item","_hoisted_18","servicedPeriod","start","_hoisted_19","_hoisted_20","showProvider","provider","reference","getProvider","_hoisted_21","service","_hoisted_23","_hoisted_24","productOrService","_hoisted_25","_hoisted_26","_hoisted_27","currentRecord","refs","_hoisted_28","_hoisted_29","_hoisted_31","_hoisted_33","_hoisted_34","_hoisted_36","_hoisted_37","_hoisted_38","synonymsUniqueWords","_hoisted_39","_hoisted_40","word","clientDataLoaded","claims","providers","allRecordsById","medicalSynonyms","currentSearchMedicalSynonyms","sortBy","displayType","currentClaimUrl","currentRecordUrl","relatedRecords","currentClaim","watch","newC","oldC","toggleJsonDisplay","node","claimNode","getElementById","classList","contains","replace","jsonTree","lastNode","color","backgroundColor","docEl","tree","innerHTML","organization","jsonview","t2","d3","relTree","allRecsThatReferenceId","providerNameString","providerResource","provNameObj","provOrg","prefix","res","r","stringify","allRecsReferenced","rec","eob","ref","p","getters","providerByRef","toSort","sortVar","searching","currSearch","searchStr","currRecType","recs","recsType","created","updated","routes","path","component","RepClientView","LoadView","ClientDataView","router","createRouter","history","createWebHistory","process","nameString","nameObj","searchAllLeafsForStr","str","getAllRefsWithinResource","substring","Array","isArray","el","concat","arrNodes","Object","keys","n","mapAllRefsInRecs","refRecs","recsById","refUrls","Set","sortRecsIntoTypes","organizations","encounters","prepositions","medically_unspecific_words","medicalConceptsToWords","medicalConcepts","uniqueMedicalConceptWordsCount","concept","words","split","uniqueMedicalConceptsWords","analyzeClaim","allClaimText","analysisObj","synonyms","matches","uniqueMedicalConceptWords","analyzeRecord","allRecText","async","searchUMLS","seedTerm","partialMatch","base_uri","apiKey","apiKeyUrlParam","url","encodeURIComponent","createStore","repId","records","currentRecordsType","availableClients","umlsSearches","findProviderForEOB","providerRef","rsource","referencesToRec","recUrl","mutations","ind","encounterMatch","e","participant","individual","pOrgRef","serviceProvider","organizationRef","o","setClients","setCurrentRecords","params","sortVarPaths","sortVarPath","getVarFromObj","varPath","reduce","acc","varCompare","a","b","aVar","bVar","toSorted","reverse","toReverse","searchCurrentRecords","searchStrL","currentRecordsNoSearch","setSearchingUmlsStatus","stat","setSynonyms","results","filteredMatches","actions","getMedicalSynonyms","baseConceptResults","conceptReq","uri","conceptRes","conceptJson","umlsConcept","exactMatch","relationCount","relReq","relations","relRes","relJson","cleanRel","cleanEl","additionalRelationLabel","relationType","relationLabel","relatedIdName","source","rootSource","relatedId","checkClientsStatus","clientsToCheck","status","clientStatusUrl","statusResults","statJson","checkClientStatus","clientId","patientId","loadTestClientFrom1up","reqParams","client_id","redirect_uri","paramStr","loadTestClientFromDisk","testData","mappedRecs","typedRecs","loadClientFromUpload","clientData","modules","createApp","App","use","store","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","getter","__esModule","d","definition","defineProperty","enumerable","get","g","globalThis","Function","window","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}